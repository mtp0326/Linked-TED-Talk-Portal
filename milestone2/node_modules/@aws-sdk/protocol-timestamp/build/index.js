"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function iso8601(time) {
    return toDate(time)
        .toISOString()
        .replace(/\.\d{3}Z$/, "Z");
}
exports.iso8601 = iso8601;
function rfc822(time) {
    return toDate(time).toUTCString();
}
exports.rfc822 = rfc822;
function epoch(time) {
    return Math.floor(toDate(time).valueOf() / 1000);
}
exports.epoch = epoch;
function toDate(time) {
    if (typeof time === "number") {
        return new Date(time * 1000);
    }
    if (typeof time === "string") {
        if (Number(time)) {
            return new Date(Number(time) * 1000);
        }
        return new Date(time);
    }
    return time;
}
exports.toDate = toDate;
function formatTimestamp(time, format) {
    switch (format) {
        case "iso8601":
            return iso8601(time);
        case "rfc822":
            return rfc822(time);
        case "unixTimestamp":
            return epoch(time);
        default:
            throw new Error("Invalid TimestampFormat: " + format);
    }
}
exports.formatTimestamp = formatTimestamp;
//# sourceMappingURL=index.js.map