"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var response_metadata_extractor_1 = require("@aws-sdk/response-metadata-extractor");
var is_array_buffer_1 = require("@aws-sdk/is-array-buffer");
var JsonRpcParser = /** @class */ (function () {
    function JsonRpcParser(bodyParser, parseServiceException, bodyCollector, utf8Encoder) {
        this.bodyParser = bodyParser;
        this.parseServiceException = parseServiceException;
        this.bodyCollector = bodyCollector;
        this.utf8Encoder = utf8Encoder;
    }
    JsonRpcParser.prototype.parse = function (operation, input) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var body, partialOutput;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.resolveBodyString(input)];
                    case 1:
                        body = _a.sent();
                        if (input.statusCode > 299) {
                            throw this.parseServiceException(operation, tslib_1.__assign({}, input, { body: body }), this.bodyParser);
                        }
                        partialOutput = this.bodyParser.parse(operation.output, body);
                        partialOutput.$metadata = response_metadata_extractor_1.extractMetadata(input);
                        return [2 /*return*/, partialOutput];
                }
            });
        });
    };
    JsonRpcParser.prototype.resolveBodyString = function (input) {
        var _this = this;
        var _a = input.body, body = _a === void 0 ? '' : _a;
        if (typeof body === 'string') {
            return Promise.resolve(body);
        }
        var bufferPromise;
        if (ArrayBuffer.isView(body)) {
            bufferPromise = Promise.resolve(new Uint8Array(body.buffer, body.byteLength, body.byteOffset));
        }
        else if (is_array_buffer_1.isArrayBuffer(body)) {
            bufferPromise = Promise.resolve(new Uint8Array(body, 0, body.byteLength));
        }
        else {
            bufferPromise = this.bodyCollector(body);
        }
        return bufferPromise.then(function (buffer) { return _this.utf8Encoder(buffer); });
    };
    return JsonRpcParser;
}());
exports.JsonRpcParser = JsonRpcParser;
//# sourceMappingURL=JsonRpcParser.js.map