"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var is_array_buffer_1 = require("@aws-sdk/is-array-buffer");
var protocol_timestamp_1 = require("@aws-sdk/protocol-timestamp");
var is_iterable_1 = require("@aws-sdk/is-iterable");
var JsonBuilder = /** @class */ (function () {
    function JsonBuilder(base64Encoder, utf8Decoder) {
        this.base64Encoder = base64Encoder;
        this.utf8Decoder = utf8Decoder;
    }
    JsonBuilder.prototype.build = function (_a) {
        var operation = _a.operation, _b = _a.member, member = _b === void 0 ? operation.input : _b, input = _a.input;
        var shape = member.shape;
        return JSON.stringify(this.format(shape, input));
    };
    JsonBuilder.prototype.format = function (shape, input) {
        var e_1, _a, e_2, _b, e_3, _c, e_4, _d;
        var inputType = typeof input;
        if (shape.type === 'structure') {
            if (inputType !== 'object' || input === null) {
                throw new Error("Unable to serialize value of type " + typeof input + " as a"
                    + ' structure');
            }
            var data = {};
            try {
                for (var _e = tslib_1.__values(Object.keys(input)), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var key = _f.value;
                    if (input[key] === undefined ||
                        input[key] === null ||
                        !(key in shape.members)) {
                        continue;
                    }
                    var _g = shape.members[key], location = _g.location, _h = _g.locationName, locationName = _h === void 0 ? key : _h, memberShape = _g.shape;
                    if (!location) {
                        data[locationName] = this.format(memberShape, input[key]);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return data;
        }
        else if (shape.type === 'list') {
            if (Array.isArray(input) || is_iterable_1.isIterable(input)) {
                var data = [];
                try {
                    for (var input_1 = tslib_1.__values(input), input_1_1 = input_1.next(); !input_1_1.done; input_1_1 = input_1.next()) {
                        var element = input_1_1.value;
                        data.push(this.format(shape.member.shape, element));
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (input_1_1 && !input_1_1.done && (_b = input_1.return)) _b.call(input_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                return data;
            }
            throw new Error('Unable to serialize value that is neither an array nor an'
                + ' iterable as a list');
        }
        else if (shape.type === 'map') {
            var data = {};
            // A map input is should be a [key, value] iterable...
            if (is_iterable_1.isIterable(input)) {
                try {
                    for (var input_2 = tslib_1.__values(input), input_2_1 = input_2.next(); !input_2_1.done; input_2_1 = input_2.next()) {
                        var _j = tslib_1.__read(input_2_1.value, 2), key = _j[0], value = _j[1];
                        data[key] = this.format(shape.value.shape, value);
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (input_2_1 && !input_2_1.done && (_c = input_2.return)) _c.call(input_2);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
                return data;
            }
            // ... or an object
            if (inputType !== 'object' || input === null) {
                throw new Error('Unable to serialize value that is neither a [key, value]'
                    + ' iterable nor an object as a map');
            }
            try {
                for (var _k = tslib_1.__values(Object.keys(input)), _l = _k.next(); !_l.done; _l = _k.next()) {
                    var key = _l.value;
                    data[key] = this.format(shape.value.shape, input[key]);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_l && !_l.done && (_d = _k.return)) _d.call(_k);
                }
                finally { if (e_4) throw e_4.error; }
            }
            return data;
        }
        else if (shape.type === 'blob') {
            if (typeof input === 'string') {
                input = this.utf8Decoder(input);
            }
            else if (ArrayBuffer.isView(input)) {
                input = new Uint8Array(input.buffer, input.byteOffset, input.byteLength);
            }
            else if (is_array_buffer_1.isArrayBuffer(input)) {
                input = new Uint8Array(input);
            }
            else {
                throw new Error('Unable to serialize value that is neither a string nor an'
                    + ' ArrayBuffer nor an ArrayBufferView as a blob');
            }
            return this.base64Encoder(input);
        }
        else if (shape.type === 'timestamp') {
            if (['number', 'string'].indexOf(typeof input) > -1
                || Object.prototype.toString.call(input) === '[object Date]') {
                return protocol_timestamp_1.epoch(input);
            }
            throw new Error('Unable to serialize value that is neither a string nor a'
                + ' number nor a Date object as a timestamp');
        }
        return input;
    };
    return JsonBuilder;
}());
exports.JsonBuilder = JsonBuilder;
//# sourceMappingURL=index.js.map