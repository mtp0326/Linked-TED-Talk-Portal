"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var protocol_timestamp_1 = require("@aws-sdk/protocol-timestamp");
var JsonParser = /** @class */ (function () {
    function JsonParser(base64Decoder) {
        this.base64Decoder = base64Decoder;
    }
    JsonParser.prototype.parse = function (shape, input) {
        return this.unmarshall(shape.shape, JSON.parse(input));
    };
    JsonParser.prototype.unmarshall = function (shape, input) {
        var _this = this;
        if (shape.type === 'structure') {
            if (typeof input !== 'object' || input === null) {
                return undefined;
            }
            return Object.keys(shape.members)
                .reduce(function (output, memberName) {
                var _a = shape.members[memberName], _b = _a.locationName, locationName = _b === void 0 ? memberName : _b, memberShape = _a.shape;
                var value = input[locationName];
                if (value !== undefined) {
                    output[memberName] = _this.unmarshall(memberShape, value);
                }
                return output;
            }, {});
        }
        if (shape.type === 'list') {
            if (!Array.isArray(input)) {
                return undefined;
            }
            var memberShape_1 = shape.member.shape;
            return input.map(function (value) { return _this.unmarshall(memberShape_1, value); });
        }
        if (shape.type === 'map') {
            if (typeof input !== 'object' || input === null) {
                return undefined;
            }
            var valueShape_1 = shape.value.shape;
            return Object.keys(input)
                .reduce(function (output, key) {
                output[key] = _this.unmarshall(valueShape_1, input[key]);
                return output;
            }, {});
        }
        if (shape.type === 'timestamp') {
            if (typeof input !== 'number') {
                return undefined;
            }
            return protocol_timestamp_1.toDate(input);
        }
        if (shape.type === 'blob') {
            if (typeof input !== 'string') {
                return undefined;
            }
            return this.base64Decoder(input);
        }
        return input;
    };
    return JsonParser;
}());
exports.JsonParser = JsonParser;
//# sourceMappingURL=index.js.map