"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
function resolveConfiguration(providedConfiguration, configurationDefinition, middlewareStack) {
    var e_1, _a;
    var out = {};
    var applicators = [];
    try {
        // Iterate over the definitions own keys, using getOwnPropertyNames to
        // guarantee insertion order is preserved.
        // @see https://www.ecma-international.org/ecma-262/6.0/#sec-ordinary-object-internal-methods-and-internal-slots-ownpropertykeys
        for (var _b = tslib_1.__values(Object.getOwnPropertyNames(configurationDefinition)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var property = _c.value;
            var _d = configurationDefinition[property], required = _d.required, defaultValue = _d.defaultValue, defaultProvider = _d.defaultProvider, normalize = _d.normalize, apply = _d.apply;
            var input = providedConfiguration[property];
            if (input === undefined) {
                if (defaultValue !== undefined) {
                    input = defaultValue;
                }
                else if (defaultProvider) {
                    input = defaultProvider(out);
                }
                else if (required) {
                    throw new Error("No input provided for required configuration parameter: " + property);
                }
            }
            else if (normalize) {
                input = normalize(input, out);
            }
            out[property] = input;
            if (apply) {
                applicators.push(apply);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    applicators.forEach(function (func) { return func(out, middlewareStack); });
    return out;
}
exports.resolveConfiguration = resolveConfiguration;
//# sourceMappingURL=index.js.map