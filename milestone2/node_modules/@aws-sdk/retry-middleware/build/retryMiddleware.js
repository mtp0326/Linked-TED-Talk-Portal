"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var constants_1 = require("./constants");
var delayDecider_1 = require("./delayDecider");
var retryDecider_1 = require("./retryDecider");
var service_error_classification_1 = require("@aws-sdk/service-error-classification");
function retryMiddleware(maxRetries, retryDecider, delayDecider) {
    if (retryDecider === void 0) { retryDecider = retryDecider_1.defaultRetryDecider(); }
    if (delayDecider === void 0) { delayDecider = delayDecider_1.defaultDelayDecider; }
    return function (next) { return function retry(args) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var retries, totalDelay, _loop_1, state_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        retries = 0;
                        totalDelay = 0;
                        _loop_1 = function () {
                            var result, err_1, delay_1;
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        _a.trys.push([0, 2, , 5]);
                                        return [4 /*yield*/, next(args)];
                                    case 1:
                                        result = _a.sent();
                                        result.$metadata.retries = retries;
                                        result.$metadata.totalRetryDelay = totalDelay;
                                        return [2 /*return*/, { value: result }];
                                    case 2:
                                        err_1 = _a.sent();
                                        if (!(retries < maxRetries && retryDecider(err_1))) return [3 /*break*/, 4];
                                        delay_1 = delayDecider(service_error_classification_1.isThrottlingError(err_1)
                                            ? constants_1.THROTTLING_RETRY_DELAY_BASE
                                            : constants_1.DEFAULT_RETRY_DELAY_BASE, retries++);
                                        totalDelay += delay_1;
                                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, delay_1); })];
                                    case 3:
                                        _a.sent();
                                        return [2 /*return*/, "continue"];
                                    case 4:
                                        if (!err_1.$metadata) {
                                            err_1.$metadata = {};
                                        }
                                        err_1.$metadata.retries = retries;
                                        err_1.$metadata.totalRetryDelay = totalDelay;
                                        throw err_1;
                                    case 5: return [2 /*return*/];
                                }
                            });
                        };
                        _a.label = 1;
                    case 1:
                        if (!true) return [3 /*break*/, 3];
                        return [5 /*yield**/, _loop_1()];
                    case 2:
                        state_1 = _a.sent();
                        if (typeof state_1 === "object")
                            return [2 /*return*/, state_1.value];
                        return [3 /*break*/, 1];
                    case 3: return [2 /*return*/];
                }
            });
        });
    }; };
}
exports.retryMiddleware = retryMiddleware;
//# sourceMappingURL=retryMiddleware.js.map