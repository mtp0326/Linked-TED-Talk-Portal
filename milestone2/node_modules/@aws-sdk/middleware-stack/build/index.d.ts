import { BuildHandlerOptions, FinalizeHandler, FinalizeHandlerOptions, FinalizeMiddleware, Handler, HandlerExecutionContext, HandlerOptions, Middleware, MiddlewareStack as IMiddlewareStack, SerializeHandlerOptions } from "@aws-sdk/types";
export interface MiddlewareStack<Input extends object, Output extends object, Stream = Uint8Array> extends IMiddlewareStack<Input, Output, Stream> {
}
export declare class MiddlewareStack<Input extends object, Output extends object, Stream = Uint8Array> {
    private readonly entries;
    private sorted;
    add(middleware: Middleware<Input, Output>, options?: HandlerOptions & {
        step?: "initialize";
    }): void;
    add(middleware: Middleware<Input, Output>, options: SerializeHandlerOptions): void;
    add(middleware: FinalizeMiddleware<Input, Output, Stream>, options: BuildHandlerOptions): void;
    add(middleware: FinalizeMiddleware<Input, Output, Stream>, options: FinalizeHandlerOptions): void;
    clone(): IMiddlewareStack<Input, Output, Stream>;
    concat<InputType extends Input, OutputType extends Output>(from: MiddlewareStack<InputType, OutputType, Stream>): MiddlewareStack<InputType, OutputType, Stream>;
    remove(toRemove: Middleware<Input, Output> | string): boolean;
    filter(callbackfn: (handlerOptions: HandlerOptions) => boolean): MiddlewareStack<Input, Output, Stream>;
    resolve<InputType extends Input, OutputType extends Output>(handler: FinalizeHandler<InputType, OutputType, Stream>, context: HandlerExecutionContext): Handler<InputType, OutputType>;
    private removeByIdentity;
    private removeByTag;
    private sort;
}
