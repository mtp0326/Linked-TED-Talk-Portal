"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var DynamoDBClient_1 = require("./DynamoDBClient");
var BatchGetItemCommand_1 = require("./commands/BatchGetItemCommand");
var BatchWriteItemCommand_1 = require("./commands/BatchWriteItemCommand");
var CreateBackupCommand_1 = require("./commands/CreateBackupCommand");
var CreateGlobalTableCommand_1 = require("./commands/CreateGlobalTableCommand");
var CreateTableCommand_1 = require("./commands/CreateTableCommand");
var DeleteBackupCommand_1 = require("./commands/DeleteBackupCommand");
var DeleteItemCommand_1 = require("./commands/DeleteItemCommand");
var DeleteTableCommand_1 = require("./commands/DeleteTableCommand");
var DescribeBackupCommand_1 = require("./commands/DescribeBackupCommand");
var DescribeContinuousBackupsCommand_1 = require("./commands/DescribeContinuousBackupsCommand");
var DescribeEndpointsCommand_1 = require("./commands/DescribeEndpointsCommand");
var DescribeGlobalTableCommand_1 = require("./commands/DescribeGlobalTableCommand");
var DescribeGlobalTableSettingsCommand_1 = require("./commands/DescribeGlobalTableSettingsCommand");
var DescribeLimitsCommand_1 = require("./commands/DescribeLimitsCommand");
var DescribeTableCommand_1 = require("./commands/DescribeTableCommand");
var DescribeTimeToLiveCommand_1 = require("./commands/DescribeTimeToLiveCommand");
var GetItemCommand_1 = require("./commands/GetItemCommand");
var ListBackupsCommand_1 = require("./commands/ListBackupsCommand");
var ListGlobalTablesCommand_1 = require("./commands/ListGlobalTablesCommand");
var ListTablesCommand_1 = require("./commands/ListTablesCommand");
var ListTagsOfResourceCommand_1 = require("./commands/ListTagsOfResourceCommand");
var PutItemCommand_1 = require("./commands/PutItemCommand");
var QueryCommand_1 = require("./commands/QueryCommand");
var RestoreTableFromBackupCommand_1 = require("./commands/RestoreTableFromBackupCommand");
var RestoreTableToPointInTimeCommand_1 = require("./commands/RestoreTableToPointInTimeCommand");
var ScanCommand_1 = require("./commands/ScanCommand");
var TagResourceCommand_1 = require("./commands/TagResourceCommand");
var UntagResourceCommand_1 = require("./commands/UntagResourceCommand");
var UpdateContinuousBackupsCommand_1 = require("./commands/UpdateContinuousBackupsCommand");
var UpdateGlobalTableCommand_1 = require("./commands/UpdateGlobalTableCommand");
var UpdateGlobalTableSettingsCommand_1 = require("./commands/UpdateGlobalTableSettingsCommand");
var UpdateItemCommand_1 = require("./commands/UpdateItemCommand");
var UpdateTableCommand_1 = require("./commands/UpdateTableCommand");
var UpdateTimeToLiveCommand_1 = require("./commands/UpdateTimeToLiveCommand");
var DynamoDB = /** @class */ (function (_super) {
    tslib_1.__extends(DynamoDB, _super);
    function DynamoDB() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DynamoDB.prototype.batchGetItem = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new BatchGetItemCommand_1.BatchGetItemCommand(args);
        if (typeof cb === 'function') {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    DynamoDB.prototype.batchWriteItem = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new BatchWriteItemCommand_1.BatchWriteItemCommand(args);
        if (typeof cb === 'function') {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    DynamoDB.prototype.createBackup = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new CreateBackupCommand_1.CreateBackupCommand(args);
        if (typeof cb === 'function') {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    DynamoDB.prototype.createGlobalTable = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new CreateGlobalTableCommand_1.CreateGlobalTableCommand(args);
        if (typeof cb === 'function') {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    DynamoDB.prototype.createTable = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new CreateTableCommand_1.CreateTableCommand(args);
        if (typeof cb === 'function') {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    DynamoDB.prototype.deleteBackup = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DeleteBackupCommand_1.DeleteBackupCommand(args);
        if (typeof cb === 'function') {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    DynamoDB.prototype.deleteItem = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DeleteItemCommand_1.DeleteItemCommand(args);
        if (typeof cb === 'function') {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    DynamoDB.prototype.deleteTable = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DeleteTableCommand_1.DeleteTableCommand(args);
        if (typeof cb === 'function') {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    DynamoDB.prototype.describeBackup = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DescribeBackupCommand_1.DescribeBackupCommand(args);
        if (typeof cb === 'function') {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    DynamoDB.prototype.describeContinuousBackups = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DescribeContinuousBackupsCommand_1.DescribeContinuousBackupsCommand(args);
        if (typeof cb === 'function') {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    DynamoDB.prototype.describeEndpoints = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DescribeEndpointsCommand_1.DescribeEndpointsCommand(args);
        if (typeof cb === 'function') {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    DynamoDB.prototype.describeGlobalTable = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DescribeGlobalTableCommand_1.DescribeGlobalTableCommand(args);
        if (typeof cb === 'function') {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    DynamoDB.prototype.describeGlobalTableSettings = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DescribeGlobalTableSettingsCommand_1.DescribeGlobalTableSettingsCommand(args);
        if (typeof cb === 'function') {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    DynamoDB.prototype.describeLimits = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DescribeLimitsCommand_1.DescribeLimitsCommand(args);
        if (typeof cb === 'function') {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    DynamoDB.prototype.describeTable = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DescribeTableCommand_1.DescribeTableCommand(args);
        if (typeof cb === 'function') {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    DynamoDB.prototype.describeTimeToLive = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new DescribeTimeToLiveCommand_1.DescribeTimeToLiveCommand(args);
        if (typeof cb === 'function') {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    DynamoDB.prototype.getItem = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new GetItemCommand_1.GetItemCommand(args);
        if (typeof cb === 'function') {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    DynamoDB.prototype.listBackups = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new ListBackupsCommand_1.ListBackupsCommand(args);
        if (typeof cb === 'function') {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    DynamoDB.prototype.listGlobalTables = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new ListGlobalTablesCommand_1.ListGlobalTablesCommand(args);
        if (typeof cb === 'function') {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    DynamoDB.prototype.listTables = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new ListTablesCommand_1.ListTablesCommand(args);
        if (typeof cb === 'function') {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    DynamoDB.prototype.listTagsOfResource = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new ListTagsOfResourceCommand_1.ListTagsOfResourceCommand(args);
        if (typeof cb === 'function') {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    DynamoDB.prototype.putItem = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new PutItemCommand_1.PutItemCommand(args);
        if (typeof cb === 'function') {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    DynamoDB.prototype.query = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new QueryCommand_1.QueryCommand(args);
        if (typeof cb === 'function') {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    DynamoDB.prototype.restoreTableFromBackup = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new RestoreTableFromBackupCommand_1.RestoreTableFromBackupCommand(args);
        if (typeof cb === 'function') {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    DynamoDB.prototype.restoreTableToPointInTime = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new RestoreTableToPointInTimeCommand_1.RestoreTableToPointInTimeCommand(args);
        if (typeof cb === 'function') {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    DynamoDB.prototype.scan = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new ScanCommand_1.ScanCommand(args);
        if (typeof cb === 'function') {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    DynamoDB.prototype.tagResource = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new TagResourceCommand_1.TagResourceCommand(args);
        if (typeof cb === 'function') {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    DynamoDB.prototype.untagResource = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new UntagResourceCommand_1.UntagResourceCommand(args);
        if (typeof cb === 'function') {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    DynamoDB.prototype.updateContinuousBackups = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new UpdateContinuousBackupsCommand_1.UpdateContinuousBackupsCommand(args);
        if (typeof cb === 'function') {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    DynamoDB.prototype.updateGlobalTable = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new UpdateGlobalTableCommand_1.UpdateGlobalTableCommand(args);
        if (typeof cb === 'function') {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    DynamoDB.prototype.updateGlobalTableSettings = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new UpdateGlobalTableSettingsCommand_1.UpdateGlobalTableSettingsCommand(args);
        if (typeof cb === 'function') {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    DynamoDB.prototype.updateItem = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new UpdateItemCommand_1.UpdateItemCommand(args);
        if (typeof cb === 'function') {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    DynamoDB.prototype.updateTable = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new UpdateTableCommand_1.UpdateTableCommand(args);
        if (typeof cb === 'function') {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    DynamoDB.prototype.updateTimeToLive = function (args, cb) {
        // create the appropriate command and pass it to .send
        var command = new UpdateTimeToLiveCommand_1.UpdateTimeToLiveCommand(args);
        if (typeof cb === 'function') {
            this.send(command, cb);
        }
        else {
            return this.send(command);
        }
    };
    return DynamoDB;
}(DynamoDBClient_1.DynamoDBClient));
exports.DynamoDB = DynamoDB;
//# sourceMappingURL=DynamoDB.js.map